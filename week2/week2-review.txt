# Questions
## Java Basics
1.	What is Java? / Explain some features of Java
	- Java is a mature language
		- lot of documentation 
		- supported/ backed by Oracle
	- Highlevel programming language
	- OOP language
		- also supports other programming paradigms 
			- OOP
			- functional
	- Compiled language
		- provides compile time error checking
	- Strictly typed language
		- variable needs to declared with a type
	- WORA/ Platform independence
		- via the JVM
	- Multithreaded language
	- Automatic memory management
		- Garbage collector
2.	What is JRE / JDK / JVM?
	- Java Development Kit
		- Contains the JVM and the JRE
		- Contains the compiler (javac) and other tools for development
		- Provide an environment to develop and execute a Java program
	- Java Runtime Environment
		- Includes core libraries of Java
		- Includes the JVM
		- ALL THAT'S NEEDED TO RUN an application
	- Java Virtual Machine
		- takes the compiled code and executes it starting from the main method
	- Compilation process in Java
		- Highlevel Java code (.java) => Compilation Step (javac) => Bytecode (intermediary language) (.class) 
		- then interpreted by the JVM
3.	What is the difference between an object and a class?

	Object
		-	Created through new keyword
		-	Created many times as per requirement
		-	Allocates memory when it's created

	Class
		-	Declared using class keyword
		-	Only Declared Once
		-	Doesn't allocate memory when it's created
		- Blueprint for object, defines states and behaviors
			- states refer to field, properties
			- behaviors refer to methods
			
4.	What is the root class from which every class extends?
	- Object class
		- Parent of all classes
			- contains methods such:
				- toString() - override to return a String representation of an object
				- equals(...) - override to actually compare the fields of the instances

5.	What are the primitive data types in Java?
		- boolean
			- true/false: size is jvm dependent
		- character
			- 'A': 2bytes
		- Whole numbers
			- byte: 1byte
			- short: 2bytes
			- int: 4bytes // default
			- long: 8 bytes
		- Floating points, accomodate for decimals
			- float: 4 bytes
			- double: 8 bytes // default

6.	Where are Strings stored?
	- Strings are usually stored in the String pool (in the heap)
		- where all strings instantiated literally (ie: String s = "Hello";) are stored
		- this allows Java to reuse the save String for repeated valued strings
	- String newS = new String("Hello"); //Creates the string in the heap itself instead of in the String Pool
	- String s = "Hello"; //Creates the string in the String Pool, can be reused
	- interning
		- .intern() method - checks if a String is already in the String Pool and if it exists returns a reference to it,
			else creates that string and returns that reference

7.	Explain stack vs heap
	-	Java Heap Space is used throughout the application, but Stack is only used for the method — 
			or methods — currently running.
	-	The Heap Space contains all objects are created, but Stack contains any reference to those objects.
	-	Objects stored in the Heap can be accessed throughout the application. Primitive local variables 
			are only accessed the Stack Memory blocks that contain their methods.
	-	Memory allocation in the Heap Space is accessed through a complex, young-generation, old-generation 
			system. Stack is accessed through a last-in, first-out (LIFO) memory allocation system.
	-	Heap Space exists as long as the application runs and is larger than Stack, which is temporary, but faster.

	1.	Are variable references stored on the stack or heap? What about the objects they refer to?
		-	variables are stored in the stack, objects are stored in the heap.

8.	What are annotations?
	-	Annotations, a form of metadata, provide data about a program that is not part of the program itself. 
			Annotations have no direct effect on the operation of the code they annotate.

9a.	Why are strings immutable in java? 
	-	The key benefits of keeping this class as immutable are caching, security, synchronization, and performance.

9b.	How would you make your own objects immutable?

10.	What is the difference between String, StringBuilder, and StringBuffer?
11.	What are the different variable scopes in Java?
12.	What are the access modifiers in Java? Explain them.
13.	What are the non-access modifiers in Java?
14.	What is the difference between static and final variables?
15.	What are the default values for all data types in Java?
16.	What makes a class immutable?
17.	What data types are supported in switch statements?
18.	How to pass multiple values with a single parameter into a method?
19.	What methods are available in the Object class?
20.	What is the difference between == and .equals()?
21.	What is an enhanced for loop?
22.	What are the 3 usages of “super” keyword?
23.	What is the first line of any constructor?
24.	How would you perform constructor chaining?
25.	What happens if you don’t define a constructor for a class? Can you still instantiate it?

## OOP
1.	What are the 4 pillars of OOP? Explain each and give examples of you implement them in Java code
2.	What is the difference between an abstract class and an interface?
3.	Can abstract methods have concrete methods? Can concrete (non-abstract) classes have abstract methods?
4.	Can static methods access instance variables? Can non-static methods access static variables?
5.	What are the implicit modifiers for interface variables? methods?
6.	What is the difference between method overloading and overriding? What are the rules for changing the method signature of overloaded methods?
7.	What are covariant return types? What rules apply to return types for overridden methods?
8.	When do you use extends or implements keywords?

## Exceptions
1.	What is the difference between final, .finalize(), and finally?
2.	Explain throw vs throws vs Throwable
3.	Do you need a catch block? Can you have more than 1? Is there an order to follow?
4.	What is base class of all exceptions? What interface do they all implement?
5.	List some checked and unchecked exceptions?
6.	Multi-catch block - can you catch more than one exception in a single catch block?

## JUnit
1.	What is JUnit?
2.	What is TDD?
3.	What are the annotations in JUnit? Order of execution?
4.	Give an example of a test case
5.	How would you prevent a test from being run without commenting it out?
6. 	How would you test that a specific exception is thrown?

## Maven
1.	What is Maven?
2.	What is the default Maven build lifecycle?
3.	Where / when does Maven retrieve dependencies from? Where are they stored locally?
4.	What is the POM and what is the pom.xml?
5.	What defines Maven project coordinates?



