# Questions
## Java Basics
1.	What is Java? / Explain some features of Java
	- Java is a mature language
		- lot of documentation 
		- supported/ backed by Oracle
	- Highlevel programming language
	- OOP language
		- also supports other programming paradigms 
			- OOP
			- functional
	- Compiled language
		- provides compile time error checking
	- Strictly typed language
		- variable needs to declared with a type
	- WORA/ Platform independence
		- via the JVM
	- Multithreaded language
	- Automatic memory management
		- Garbage collector
2.	What is JRE / JDK / JVM?
	- Java Development Kit
		- Contains the JVM and the JRE
		- Contains the compiler (javac) and other tools for development
		- Provide an environment to develop and execute a Java program
	- Java Runtime Environment
		- Includes core libraries of Java
		- Includes the JVM
		- ALL THAT'S NEEDED TO RUN an application
	- Java Virtual Machine
		- takes the compiled code and executes it starting from the main method
	- Compilation process in Java
		- Highlevel Java code (.java) => Compilation Step (javac) => Bytecode (intermediary language) (.class) 
		- then interpreted by the JVM
3.	What is the difference between an object and a class?

	Object
		-	Created through new keyword
		-	Created many times as per requirement
		-	Allocates memory when it's created

	Class
		-	Declared using class keyword
		-	Only Declared Once
		-	Doesn't allocate memory when it's created
		- Blueprint for object, defines states and behaviors
			- states refer to field, properties
			- behaviors refer to methods
			
4.	What is the root class from which every class extends?
	- Object class
		- Parent of all classes
			- contains methods such:
				- toString() - override to return a String representation of an object
				- equals(...) - override to actually compare the fields of the instances

5.	What are the primitive data types in Java?
		- boolean
			- true/false: size is jvm dependent
		- character
			- 'A': 2bytes
		- Whole numbers
			- byte: 1byte
			- short: 2bytes
			- int: 4bytes // default
			- long: 8 bytes
		- Floating points, accomodate for decimals
			- float: 4 bytes
			- double: 8 bytes // default

6.	Where are Strings stored?
	- Strings are usually stored in the String pool (in the heap)
		- where all strings instantiated literally (ie: String s = "Hello";) are stored
		- this allows Java to reuse the save String for repeated valued strings
	- String newS = new String("Hello"); //Creates the string in the heap itself instead of in the String Pool
	- String s = "Hello"; //Creates the string in the String Pool, can be reused
	- interning
		- .intern() method - checks if a String is already in the String Pool and if it exists returns a reference to it,
			else creates that string and returns that reference

7.	Explain stack vs heap
	-	Java Heap Space is used throughout the application, but Stack is only used for the method — 
			or methods — currently running.
	-	The Heap Space contains all objects are created, but Stack contains any reference to those objects.
	-	Objects stored in the Heap can be accessed throughout the application. Primitive local variables 
			are only accessed the Stack Memory blocks that contain their methods.
	-	Memory allocation in the Heap Space is accessed through a complex, young-generation, old-generation 
			system. Stack is accessed through a last-in, first-out (LIFO) memory allocation system.
	-	Heap Space exists as long as the application runs and is larger than Stack, which is temporary, but faster.

	1.	Are variable references stored on the stack or heap? What about the objects they refer to?
		-	variables are stored in the stack, objects are stored in the heap.

8.	What are annotations?
	-	Annotations, a form of metadata, provide data about a program that is not part of the program itself. 
			Annotations have no direct effect on the operation of the code they annotate.

9a.	Why are strings immutable in java? 
	-	The key benefits of keeping this class as immutable are caching, security, synchronization, and performance.

9b.	How would you make your own objects immutable?
	-	Don't add any setter method
	-	Declare all fields final and private
	-	If a field is a mutable object create defensive copies of it for getter methods
	-	If a mutable object passed to the constructor must be assigned to a field create a defensive copy of it
	-	Don't allow subclasses to override methods

10.	What is the difference between String, StringBuilder, and StringBuffer?
	-	Objects of String are immutable, and objects of StringBuffer and StringBuilder are mutable
	-	StringBuffer and StringBuilder are similar, but StringBuilder is faster and preferred over StringBuffer for the single-threaded program. If thread safety is needed, then StringBuffer is used

11.	What are the different variable scopes in Java?
	-	Member Variables (Class Level Scope)
		-	These variables must be declared inside class (outside any function). They can be directly accessed anywhere in class.
	-	Local Variables (Method Level Scope)
		-	Variables declared inside a method have method level scope and can’t be accessed outside the method. 
		-	Note : Local variables don’t exist after method’s execution is over.
	-	Loop Variables (Block Scope)
		-	A variable declared inside pair of brackets “{” and “}” in a method has scope within the brackets only.
	- instance/object scope
		- variable lives throughout the lifetime of an object
			- begins when the object is instantiated up to the point the object is garbage collected	

12.	What are the access modifiers in Java? Explain them.
	-	Private: 
		-	We can access the private modifier only within the same class and not from outside the class.
	-	Default: 
		-	We can access the default modifier only within the same package and not from outside the package. And also, if we do not specify any access modifier it will automatically consider it as default.
	-	Protected: 
		-	We can access the protected modifier within the same package and also from outside the package with the help of the child class. If we do not make the child class, we cannot access it from outside the package. So inheritance is a must for accessing it from outside the package.
	-	Public: 
		-	We can access the public modifier from anywhere. We can access public modifiers from within the class as well as from outside the class and also within the package and from outside the package.

13.	What are the non-access modifiers in Java?
	-	static
		-	for creating class methods and variables
	-	final
		-	for finalizing the implementations of classes, methods, and variables
	-	abstract
		-	for creating abstract classes and methods
	-	synchronized and volatile 
		-	used for threads

14.	What is the difference between static and final variables?
	-	static is used to define the class member that can be used independently of any object of the class 
	-	final is used to declare a constant variable or a method that cannot be overridden or a class that cannot be inherited

15.	What are the default values for all data types in Java?
	-	boolean -- false
	-	char 	--	'\u0000'
	-	byte	--	0
	-	short	--	0
	-	int	--	0
	-	long	--	0L
	-	float	--	0.0f
	-	double	--	0.0

16.	What makes a class immutable?
	-	Immutable class in java means that once an object is created, we cannot change its content. In Java, all the wrapper classes (like Integer, Boolean, Byte, Short) and String class is immutable. 
	-	The requirements for creating an immutable class are:
		-	The class must be declared as final so that child classes can’t be created.
		-	Data members in the class must be declared private so that direct access is not allowed.
		-	Data members in the class must be declared as final so that we can’t change the value of it after object creation.
		-	A parameterized constructor should initialize all the fields performing a deep copy so that data members can’t be modified with an object reference.
		-	Deep Copy of objects should be performed in the getter methods to return a copy rather than returning the actual object reference)

17.	What data types are supported in switch statements?
	-	A switch works with the byte , short , char , and int primitive data types. It also works with enumerated types (discussed in Enum Types), the String class, and a few special classes that wrap certain primitive types: Character , Byte , Short , and Integer (discussed in Numbers and Strings).

18.	How to pass multiple values with a single parameter into a method?
	-	var args
		methodName(String... args)

19.	What methods are available in the Object class?
	-	public final Class getClass()	
		-	returns the Class class object of this object. The Class class can further be used to get the metadata of this class.
	-	public int hashCode()	
		-	returns the hashcode number for this object.
	-	public boolean equals(Object obj)	
		-	compares the given object to this object.
	-	protected Object clone() throws CloneNotSupportedException	
		-	creates and returns the exact copy (clone) of this object.
	-	public String toString()	
		-	returns the string representation of this object.
	-	public final void notify()	
		-	wakes up single thread, waiting on this object's monitor.
	-	public final void notifyAll()	
		-	wakes up all the threads, waiting on this object's monitor.
	-	public final void wait(long timeout)throws InterruptedException	
		-	causes the current thread to wait for the specified milliseconds, until another thread notifies (invokes notify() or notifyAll() method).
	-	public final void wait(long timeout,int nanos)throws InterruptedException	
		-	causes the current thread to wait for the specified milliseconds and nanoseconds, until another thread notifies (invokes notify() or notifyAll() method).
	-	public final void wait()throws InterruptedException	
		-	causes the current thread to wait, until another thread notifies (invokes notify() or notifyAll() method).
	-	protected void finalize()throws Throwable	
		-	is invoked by the garbage collector before object is being garbage collected.

20.	What is the difference between == and .equals()?
	-	== checks if both objects point to the same memory location
	-	.equals() evaluates to the comparison of values in the objects
	
21.	What is an enhanced for loop?
			for(dataType item : array){
				...
			}

22.	What are the 3 usages of “super” keyword?
	-	super variable refers immediate parent class instance.
	-	super variable can invoke immediate parent class method.
	-	super() acts as immediate parent class constructor and should be the first line in child class constructor.

23.	What is the first line of any constructor?
	-	The first line of a constructor must either be a call on another constructor in the same class (using this), or a call on the superclass constructor (using super). If the first line is neither of these, the compiler automatically inserts a call to the parameterless super class constructor.

24.	How would you perform constructor chaining?
	-	

25.	What happens if you don’t define a constructor for a class? Can you still instantiate it?

## OOP
1.	What are the 4 pillars of OOP? Explain each and give examples of you implement them in Java code
	-	Abstraction
	-	Polymorphism
	-	Inheritance
	-	Encapsulation	
2.	What is the difference between an abstract class and an interface?
3.	Can abstract methods have concrete methods? Can concrete (non-abstract) classes have abstract methods?
4.	Can static methods access instance variables? Can non-static methods access static variables?
5.	What are the implicit modifiers for interface variables? methods?
6.	What is the difference between method overloading and overriding? What are the rules for changing the method signature of overloaded methods?
7.	What are covariant return types? What rules apply to return types for overridden methods?
8.	When do you use extends or implements keywords?

## Exceptions
1.	What is the difference between final, .finalize(), and finally?
2.	Explain throw vs throws vs Throwable
3.	Do you need a catch block? Can you have more than 1? Is there an order to follow?
4.	What is base class of all exceptions? What interface do they all implement?
5.	List some checked and unchecked exceptions?
6.	Multi-catch block - can you catch more than one exception in a single catch block?

## JUnit
1.	What is JUnit?
2.	What is TDD?
3.	What are the annotations in JUnit? Order of execution?
4.	Give an example of a test case
5.	How would you prevent a test from being run without commenting it out?
6. 	How would you test that a specific exception is thrown?

## Maven
1.	What is Maven?
2.	What is the default Maven build lifecycle?
3.	Where / when does Maven retrieve dependencies from? Where are they stored locally?
4.	What is the POM and what is the pom.xml?
5.	What defines Maven project coordinates?



